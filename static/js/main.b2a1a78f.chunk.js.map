{"version":3,"sources":["components/Loading.js","components/MovieForm.js","components/MovieCard.js","components/Header.js","services/movieData.js","services/movieAPI.js","pages/EditMovie.js","pages/MovieDetails.js","pages/MovieList.js","pages/NewMovie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Loading","className","Component","MovieForm","props","state","movie","handleSubmit","bind","onSubmit","this","field","newValue","setState","title","htmlFor","placeholder","id","type","value","onChange","event","updateMovie","target","subtitle","imagePath","storyline","genre","rating","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","React","MovieCard","data-testid","to","src","alt","Header","movies","bookmarked","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","getMovie","movieId","find","mov","parseInt","Promise","resolve","setTimeout","EditMovie","status","shouldRedirect","fetchMovie","match","params","movieAPI","then","updatedMovie","map","MovieDetails","loading","filter","MovieList","fetchMovies","key","NewMovie","newMovie","movieData","nextId","length","history","push","NotFound","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b2a1a78f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div className=\"loading\">Carregando...</div>\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_title\">Título</label>\n        <input\n          placeholder=\"Insira o título\"\n          id=\"movie_title\"\n          type=\"text\"\n          className=\"validate\"\n          value={title}\n          onChange={(event) => this.updateMovie('title', event.target.value)}\n        />\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_subtitle\">Subtítulo</label>\n        <input\n          placeholder=\"Insira o subtítulo\"\n          id=\"movie_subtitle\"\n          type=\"text\"\n          value={subtitle}\n          onChange={(event) => this.updateMovie('subtitle', event.target.value)}\n        />\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <label htmlFor=\"movie_image\">Imagem</label>\n        <input\n          placeholder=\"Insira o caminho da imagem\"\n          id=\"movie_image\"\n          type=\"text\"\n          value={imagePath}\n          onChange={(event) => this.updateMovie('imagePath', event.target.value)}\n        />\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_storyline\">Sinopse</label>\n        <textarea\n          id=\"movie_storyline\"\n          value={storyline}\n          onChange={(event) => this.updateMovie('storyline', event.target.value)}\n        />\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_genre\">Gênero</label>\n        <select\n          id=\"movie_genre\"\n          value={genre}\n          onChange={(event) => this.updateMovie('genre', event.target.value)}\n        >\n          <option value=\"action\">Ação</option>\n          <option value=\"comedy\">Comédia</option>\n          <option value=\"thriller\">Suspense</option>\n          <option value=\"fantasy\">Fantasia</option>\n        </select>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_rating\">Avaliação</label>\n        <input\n          placeholder=\"Dê a avaliação do filme\"\n          id=\"movie_rating\"\n          type=\"number\"\n          step={0.1}\n          min={0}\n          max={5}\n          value={rating}\n          onChange={(event) => this.updateMovie('rating', event.target.value)}\n        />\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <button\n          type=\"button\"\n          onClick={this.handleSubmit}\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"form\">\n        <form>\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  movie: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    rating: PropTypes.number,\n    imagePath: PropTypes.string,\n    bookmarked: PropTypes.bool,\n    genre: PropTypes.string,\n  }).isRequired,\n};\n\nexport default MovieForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { id, title, storyline, imagePath, subtitle } = this.props.movie;\n    return (\n      <div data-testid=\"movie-card\" className=\"movie-card\">\n        <Link to={`/movies/${id}`}>\n          <img src={imagePath} alt=\"\" className=\"movie-card-image\" />\n        </Link>\n        <div className=\"movie-card-body\">\n          <h4 className=\"movie-card-title\">{title}</h4>\n          <h5 className=\"movie-card-subtitle\">{subtitle}</h5>\n          <p className=\"movie-card-storyline\">{storyline}</p>\n          <Link to={`/movies/${id}`} className=\"movie-card-link\">VER DETALHES</Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    imagePath: PropTypes.string,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"movie-card-header\">\n        <Link to=\"/\" className=\"link-header\">\n          <h1 className=\"page-title\">Movie Cards Library CRUD</h1>\n        </Link>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\n\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    setTimeout(() => {\n      const movies = readMovies();\n      resolve(movies);\n    }, 2000);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(movie);\n    }, 2000);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => {\n  const movies = readMovies().map((movie) => {\n    if (movie.id === parseInt(updatedMovie.id, 10)) {\n      return { ...movie, ...updatedMovie };\n    }\n    return movie;\n  });\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\n\nexport const createMovie = (movieData) => {\n  let movies = readMovies();\n  const nextId = movies[movies.length - 1].id + 1;\n  const newMovie = { ...movieData, id: nextId };\n  movies = [...movies, newMovie];\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({ status: 'OK' });\n    }, 1000);\n  });\n};\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { Loading, MovieForm } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: '',\n      shouldRedirect: false,\n      movie: {},\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchMovie();\n  }\n\n  fetchMovie() {\n    const { id } = this.props.match.params;\n    this.setState({ status: 'loading' }, () => {\n      movieAPI.getMovie(id).then((movie) => {\n        this.setState({ movie, status: '' });\n      });\n    });\n  }\n\n  handleSubmit(updatedMovie) {\n    movieAPI.updateMovie(updatedMovie);\n    this.setState({ shouldRedirect: true });\n  }\n\n  render() {\n    const { status, shouldRedirect, movie } = this.state;\n    if (shouldRedirect) {\n      return <Redirect to=\"/\" />;\n    }\n\n    if (status === 'loading') {\n      return <Loading />;\n    }\n\n    return (\n      <div data-testid=\"edit-movie\">\n        <MovieForm movie={movie} onSubmit={this.handleSubmit} />\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default EditMovie;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Loading } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieDetails extends Component {\n  constructor() {\n    super();\n\n    this.fetchMovie = this.fetchMovie.bind(this);\n\n    this.state = {\n      loading: false,\n      movie: {},\n    };\n  }\n\n  componentDidMount() {\n    this.fetchMovie();\n  }\n\n  fetchMovie() {\n    const { id } = this.props.match.params;\n    this.setState({ loading: true }, () => {\n      movieAPI.getMovie(id).then((movie) => {\n        this.setState({ movie, loading: false });\n      });\n    });\n  }\n\n  render() {\n    // Change the condition to check the state\n    // if (true) return <Loading />;\n    const { loading } = this.state;\n    const { id } = this.props.match.params;\n    const {\n      title,\n      storyline,\n      imagePath,\n      genre,\n      rating,\n      subtitle,\n    } = this.state.movie;\n\n    if (loading) return <Loading />;\n    return (\n      <div data-testid=\"movie-details\" className=\"movie-details\">\n        <img\n          alt=\"Movie Cover\"\n          src={`../${imagePath}`}\n          className=\"movie-card-image\"\n        />\n        <h2 className=\"movie-card-title\">{`Title: ${title}`}</h2>\n        <h4 className=\"movie-card-subtitle\">{`Subtitle: ${subtitle}`}</h4>\n        <p className=\"movie-card-storyline\">{`Storyline: ${storyline}`}</p>\n        <p className=\"movie-card-genre\">{`Genre: ${genre}`}</p>\n        <p className=\"movie-card-rating\">{`Rating: ${rating}`}</p>\n\n        <div className=\"links-movie-details\">\n          <Link\n            to=\"/\"\n            onClick={() => movieAPI.deleteMovie(id)}\n            className=\"link-deletar movie-list-link\"\n            type=\"button\"\n          >\n            DELETAR\n          </Link>\n          <Link\n            to={`/movies/${id}/edit`}\n            className=\"link-editar movie-list-link\"\n          >\n            EDITAR\n          </Link>\n          <Link to=\"/\" className=\"link-voltar movie-list-link\">\n            VOLTAR\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport MovieCard from '../components/MovieCard';\nimport Loading from '../components/Loading';\n\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n      loading: false,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchMovies();\n  }\n\n  fetchMovies() {\n    this.setState({ loading: true }, () => {\n      movieAPI.getMovies().then((movies) => {\n        this.setState({ movies, loading: false });\n      });\n    });\n  }\n\n  render() {\n    const { movies, loading } = this.state;\n    if (loading) return <Loading />;\n    return (\n      <div data-testid=\"movie-list\" className=\"movie-list\">\n        {movies.map((movie) => (\n          <MovieCard key={movie.title} movie={movie} />\n        ))}\n\n        <div className=\"div-link\">\n          <Link to=\"/movies/new\" className=\"movie-list-link\" >ADICIONAR CARTÃO</Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(newMovie) {\n    movieAPI.createMovie(newMovie);\n    this.props.history.push('/');\n  }\n\n  render() {\n    return (\n      <div data-testid=\"new-movie\">\n        <MovieForm onSubmit={this.handleSubmit} />\n      </div>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nexport default NewMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport {\n  EditMovie,\n  MovieDetails,\n  MovieList,\n  NewMovie,\n  NotFound,\n} from './pages/index';\nimport './App.css';\nimport { Header } from './components/index';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Header />\n      <Switch>\n        <Route exact path=\"/\" component={MovieList} />\n        <Route path=\"/movies/:id/edit\" component={EditMovie} />\n        <Route path=\"/movies/new\" component={NewMovie} />\n        <Route path=\"/movies/:id\" component={MovieDetails} />\n        <Route component={NotFound} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}